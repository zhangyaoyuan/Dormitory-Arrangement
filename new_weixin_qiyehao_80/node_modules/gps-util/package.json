{
  "name": "gps-util",
  "description": "GPS related functionalities",
  "keywords": [
    "gps",
    "gpx",
    "tcx",
    "parser",
    "distance",
    "calculator",
    "geohash",
    "boundingbox"
  ],
  "author": {
    "name": "Nguyen Van Nhu"
  },
  "homepage": "https://github.com/vanng822/gps-util",
  "contributors": [],
  "dependencies": {
    "xml2js": "0.4.0",
    "data2xml": "0.9.0",
    "shelly": "0.0.3"
  },
  "devDependencies": {
    "vows": ">=0.7.0",
    "nock": "*"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/vanng822/gps-util.git"
  },
  "scripts": {
    "test": "vows --spec tests/test_*.js"
  },
  "bugs": {
    "url": "https://github.com/vanng822/gps-util/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/vanng822/gps-util/blob/master/LICENSE"
    }
  ],
  "version": "1.0.1",
  "readme": "gps-util\n========\n\nGPS related functionalities. For getting and deleting gps info on an image one need to install exiftool.\n\nhttp://www.sno.phy.queensu.ca/~phil/exiftool/index.html\n\nMake sure exiftool is executable. if you have to install it manually on linux you can try ./scripts/install_exiftool.sh\n\n## Functions\n\n### getDistance(lng1, lat1, lng2, lat2)\n\nCalculate distance of 2 given points\n\n* `lng1` longitude of point 1 in decimal degrees\n* `lat1` latitude of point 1 in decimal degrees\n* `lng2` longitude of point 2 in decimal degrees\n* `lat2` latitude of point 2 in decimal degrees\n\n### getTotalDistance(points)\n\nCalculate total distance of a serial of points\n\n* `points` array of point, example\n\n\t[{lat: 59.19288511388004,\n\tlng: 17.66255029477179\n\t},{\n\tlat: 59.19290036894381,\n\tlng: 17.662896132096648\n\t}]\n\n### getBoundingBox(lat, lng, distance)\n* `lat` latitude of the center, in decimal degrees.\n* `lng` longitude of the center, in decimal degrees.\n* `distance` radius that spans the bounding box, in meters.\n\nreturn an array containing 2 points that represent the bounding box.\n\n### getMidPoint(points)\n* `points` list of coordinate, each point with properties lat and lng\n\nreturn Object/point with lat and lng\n\n### toDMS(decDegrees)\nConvert decimal degrees to degrees, minutes and seconds (return an object)\n\n### getDMSLatitude(decDegrees)\nReturn a string representation in DMS format, ie 59° 19' 59.88\" N\n\n### getDMSLongitude(decDegrees)\nReturn a string representation in DMS format, ie 18° 3' 0\" E\n\n### toDD(degrees, minutes, seconds)\nConvert to decimal degrees\n\n### gpxParse(data, callback)\n* `data` xml string of gpx format\n* `callback` function which take 2 arguments, error and result\n\n### gpxParseFile(filename, callback)\n* `filename` file to parse the data in of gpx format\n* `callback` function which take 2 arguments, error and result\n\n### gpxParseURL(url, callback)\n* `url` where the gpx data is located\n* `callback` function(error, result)\n\n### toGPX(trackingResult, callback, name)\n* `trackingResult`\n* `callback` function(error, result)\n* `name` the name you want to call for this gpx document\n\n### toKml(points, callback)\n* `points` Track points for instance returned value from gpxParse or tcxParse\n* `callback` function(error, result)\n\n### tcxParse(data, callback)\n* `data` xml string of tcx format\n* `callback` function which take 2 arguments, error and result\n\n### tcxParseFile(filename, callback)\n* `filename` file to parse the data in of tcx format\n* `callback` function which take 2 arguments, error and result\n\n### tcxParseURL(url, callback)\n* `url` where the tcx data is located\n* `callback` function(error, result)\n\n### calculateFromGPX(points, callback, fromIndex, toIndex)\n* `points` Track points for instance returned value from gpxParse\n* `callback` function(error, result) result is a TrackingResult (see calc.js for details)\n* `fromIndex` Integer from 0\n* `toIndex` Integer from 1\n\n### imageGpsInfo(image, callback)\n* `image` path to image to get GPS info\n* `callback` function(error, result)\n\n### removeGPSInfo(image, callback)\n* `image` path to image to delete GPS info\n* `callback` function(error, result) result is boolean\n\n### geohashEncode(latitude, longitude, precision)\n* `latitude` decimal latitude of the gps position\n* `longitude` decimal longitude of the gps position \n* `precision` number of chars to represent the gps position, default 12\n\n### geohashDecode(hash)\n* `hash` hashed string representing the gps position\n* return object of latitude, longitude, error\n\n",
  "readmeFilename": "README.md",
  "_id": "gps-util@1.0.1",
  "_from": "gps-util@"
}
